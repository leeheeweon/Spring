제어의 역전 IoC(Inversion of Control)
 - 기존 프로그램은 구현객체가 제어 흐름을 스스로 조종했다. (serviceImpl에서 new로 필요한것을 생성)
 - 하지만 구현객체는 자신의 로직을 실행하는 역할만 담당 
 - AppConfig를 생성해 제어권을 모두 준다, 구현객체도 AppConfig가 생성
 - 이렇게 되면 구현객체는 로직실행만 담당하게 되고 외부에서 AppConfig를 통해서 제어흐름을 관리한다. 
 - 이것을 제어의 역전(IoC)이라 한다.
 
 프레임워크 vs 라이브러리 
 - 프레임워크가 내가 작성한 코드를 제어하고, 대신 실행하면 그것은 프레임워크가 맞다.(JUnit)
 - 반면에 내가 작성한 코드가 직접 제어의 흐름을 담당한다면 그것은 프레임워크가 아니라 라이브러리다.
 
 의존관계 주입DI(Dependency Injection)
 - 정적인 클래스 의존관계와, 실행 시점에 결정되는 동적인 객체(인스턴스) 의존 관계 둘을 분리해서 생각해야함
 - 실행시점에 외부에서 실제구현 객체를 생성하고 클라이언트에 전달해서 클라이언트와 서버의 실제 의존관계가 주입됨(의존관계 주입)
 - 의존관계 주입을 사용하면 정적인 클래스 의존관계를 변경하지 않고 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다.
 
 정적인 의존관계 
 - 애플리케이션을 실행하지 않아도 분석가능(실제 어떤객체가 주입될지 알 수 없음)
 
 동적인 객체 의존관계
 - 애플리케이션 실행 시점에 실제 생성된 객체 인스턴스의 참조가 연결된 의존관계다.
 
 IoC컨테이너, DI컨테이너
 - 객체를 생성하고 연결해주는것을 IoC컨테이너 또는 DI컨테이너 라고 한다
 - 의존관계 주입에 초첨을 맞추어 최근에는 DI컨테이너라 한다.
 
 